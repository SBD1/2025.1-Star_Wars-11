import psycopg2
import sys
import os

# Adicionar o diret√≥rio src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from MUD.jogo_starwars import JogoStarWars

def testar_jogo():
    try:
        print("üöÄ Testando conex√£o e inicializa√ß√£o do jogo...")
        
        # Conectar ao banco
        conexao = psycopg2.connect(
            database="star_wars_db",
            user="postgres",
            password="postgres",
            host="localhost",
            port="5433"
        )
        print("‚úÖ Conex√£o estabelecida!")
        
        # Criar inst√¢ncia do jogo
        jogo = JogoStarWars(conexao)
        print("‚úÖ Jogo instanciado!")
        
        # Testar algumas fun√ß√µes b√°sicas
        cursor = conexao.cursor()
        
        # Verificar se h√° personagens
        cursor.execute("SELECT COUNT(*) FROM Personagem")
        total_personagens = cursor.fetchone()[0]
        print(f"üìä Total de personagens no banco: {total_personagens}")
        
        # Verificar se h√° inimigos
        cursor.execute("SELECT COUNT(*) FROM Inimigo")
        total_inimigos = cursor.fetchone()[0]
        print(f"üëπ Total de inimigos no banco: {total_inimigos}")
        
        # Testar fun√ß√£o de listar inimigos (se houver personagens)
        if total_personagens > 0:
            cursor.execute("SELECT id_player FROM Personagem LIMIT 1")
            jogador_teste = cursor.fetchone()[0]
            
            try:
                cursor.execute("SELECT * FROM listar_inimigos_planeta(%s)", (jogador_teste,))
                inimigos_planeta = cursor.fetchall()
                print(f"üåç Inimigos no planeta do jogador {jogador_teste}: {len(inimigos_planeta)}")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao listar inimigos: {e}")
        
        # Testar verifica√ß√£o de combate ativo
        jogo.jogador_atual = 1  # Simular jogador logado
        combate_ativo = jogo.verificar_combate_ativo()
        print(f"‚öîÔ∏è  Combate ativo para jogador 1: {combate_ativo}")
        
        cursor.close()
        conexao.close()
        
        print("\n‚úÖ Todos os testes b√°sicos passaram!")
        print("üéÆ O sistema de combate est√° pronto para uso!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    testar_jogo()
